---
layout: post
title: Writing a first Go package, as an experience
---
p(meta). From the bus home.

Google just released a new programming language, called <a href="http://www.golang.org">Go</a>. It's exciting, different, and intended as a concurrent systems language. It's also fairly controversial, because it changes a lot of little things, and a lot of big things that developers do and think about. It's making some people very happy, and some people very unhappy.

I decided that it was a good time to play and try to write a module, so I looked in the initial library release, and I saw that the random number generator package, <a href="http://golang.org/pkg/rand/">rand</a> could only support pseudo random numbers, using a standard seeded random number generator. I thought to myself that it would be nice to be able to use one of the secure random sources, e.g., <code>/dev/random</code> on most unices, to provide a source of randomness. So began a cute little project &hellip;

The rand package is broken up a little, into 2 distinct types. One, is a struct called Rand that implements many of the conveniance methods to retrieve random numbers that conform in some way to a range, like 0-6. The other is an interface that is intended to yield random numbers, called a <code>Source</code> . Source is an <em>interface</em> in the Go tradition, which analogous to interfaces or full abstract classes in Java and C++, for instance. I decided to override this Source interface as an exercise; I've put the results up online on <a href="http://github.com/robsc/go">my github repository</a> for everyone to follow along on. It's a quick writeup, more as a learning exercise than anything else, so here I went. 

First things first, I realised I just wanted to back my Source with a user specified file - usually something like <code>/dev/random</code>